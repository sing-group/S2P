/*
 * #%L
 * S2P
 * %%
 * Copyright (C) 2016 José Luis Capelo Martínez, José Eduardo Araújo, Florentino Fdez-Riverola, Miguel
 * 			Reboiro-Jato, Hugo López-Fernández, and Daniel Glez-Peña
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */
package es.uvigo.ei.sing.s2p.aibench.operations;

import static es.uvigo.ei.sing.s2p.aibench.util.PortConfiguration.EXTRAS_HTML_FILES;
import static es.uvigo.ei.sing.s2p.core.io.samespots.SameSpotsSampleRepeatedMeasuresFileLoader.load;

import java.io.File;
import java.io.IOException;
import java.util.List;

import es.uvigo.ei.aibench.core.operation.annotation.Direction;
import es.uvigo.ei.aibench.core.operation.annotation.Operation;
import es.uvigo.ei.aibench.core.operation.annotation.Port;
import es.uvigo.ei.sing.s2p.aibench.datatypes.SameSpotsSampleRepeatedMeasuresDatatype;
import es.uvigo.ei.sing.s2p.core.entities.SameSpotsThrehold;
import es.uvigo.ei.sing.s2p.core.entities.Sample;

@Operation(
	name = "Import a SameSpots sample report",
	description = "Imports a Progenesis SameSpots sample report from the generated HTM file."
)
public class ImportSameSpotsSampleRepeatedMeasuresReport {
	private static final String DEFAULT_P = "0.05";
	private static final String DEFAULT_FOLD = "1.5";

	private File file;
	private double pValue;
	private double fold;
	private String spotsSuffix = "";

	@Port(
		direction = Direction.INPUT,
		name = "SameSpots report file",
		description = "The directory containing the HTM files generated by the "
			+ "Protenesis SameSpots software. Please, note that you must select "
			+ "a directory and not the individual files.",
		order = 1,
		extras = EXTRAS_HTML_FILES
	)
	public void setDataDirectory(File directory) {
		this.file = directory;
	}

	@Port(
		direction = Direction.INPUT,
		name = "p-value",
		defaultValue = DEFAULT_P,
		description = "The maximum p-value allowed for spots to be loaded. "
			+ "Spots within a higher p-value will not be loaded.",
		order = 2
	)
	public void setPValue(double pValue) {
		this.pValue = pValue;
	}

	@Port(
		direction = Direction.INPUT,
		name = "Fold",
		defaultValue = DEFAULT_FOLD,
		description = "The minimum fold allowed for spots to be loaded. "
			+ "Spots within a lower fold will not be loaded.",
		order = 3
	)
	public void setFold(double fold) {
		this.fold = fold;
	}

	@Port(
		direction = Direction.INPUT,
		name = "Spots suffix",
		defaultValue = "",
		description = "The suffix to add to the spots.",
		order = 4
	)
	public void setSpotsSuffix(String spotsSuffix) {
		if(spotsSuffix != null) {
			this.spotsSuffix = spotsSuffix;
		}
	}

	@Port(direction = Direction.OUTPUT, order = 5)
	public SameSpotsSampleRepeatedMeasuresDatatype loadData()
		throws IOException {
		SameSpotsThrehold threshold = new SameSpotsThrehold(pValue, fold);
		List<Sample> samples = load(this.file, threshold, spotsSuffix);

		return new SameSpotsSampleRepeatedMeasuresDatatype(
			file, threshold, samples);
	}
}
