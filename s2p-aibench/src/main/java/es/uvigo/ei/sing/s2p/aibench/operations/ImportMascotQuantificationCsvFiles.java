/*
 * #%L
 * S2P
 * %%
 * Copyright (C) 2016 José Luis Capelo Martínez, José Eduardo Araújo, Florentino Fdez-Riverola, Miguel
 * 			Reboiro-Jato, Hugo López-Fernández, and Daniel Glez-Peña
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */
package es.uvigo.ei.sing.s2p.aibench.operations;

import static es.uvigo.ei.sing.s2p.core.entities.quantification.MascotQuantificationMethod.EMPAI;
import static es.uvigo.ei.sing.s2p.core.io.quantification.QuantificationCsvDatasetLoader.load;

import java.io.File;
import java.io.IOException;

import es.uvigo.ei.aibench.core.operation.annotation.Direction;
import es.uvigo.ei.aibench.core.operation.annotation.Operation;
import es.uvigo.ei.aibench.core.operation.annotation.Port;
import es.uvigo.ei.sing.s2p.aibench.datatypes.QuantificationDatasetDatatype;
import es.uvigo.ei.sing.s2p.core.entities.quantification.MascotQuantificationMethod;
import es.uvigo.ei.sing.s2p.core.operations.quantification.Normalization;
import es.uvigo.ei.sing.s2p.core.operations.quantification.NormalizationFactor;
import es.uvigo.ei.sing.s2p.core.operations.quantification.NormalizationFactorEnum;
import es.uvigo.ei.sing.s2p.core.operations.quantification.NormalizationStrategy;
import es.uvigo.ei.sing.s2p.core.operations.quantification.comparison.ComparisonMode;

@Operation(
	name = "Import Mascot quantifications", 
	description = "Imports Mascot emPAI quantifications from a set of Mascot CSV report files."
)
public class ImportMascotQuantificationCsvFiles {
	private static final String DESCRIPTION_DIRECTORY = "<html>"
		+ "The directory containing the CSV files generated by the "
		+ "Mascot quantification report. <br/>Please, note that you must "
		+ "select a directory and not the individual files. See help to know "
		+ "how to obain and organize these CSV files."
		+ "</html>";

	private static final String DESCRIPTION_NORMALIZATION_LEVEL =
		"<html>The level at which normalization should be applied. "
		+ "You can choose one of the following:" + "<ul>"
		+ "<li><i>Replicate</i>: to perform the normalization by replicate."
		+ "</li>"
		+ "<li><i>Sample</i>: to perform the normalization by sample.</li>"
		+ "<li><i>Global</i>: to perform the normalization taking into account "
		+ "all samples.</li>"
		+ "<li><i>No normalization</i>: if you don't want to calculate the "
		+ "normalized quantification values.</li>"
		+ "</ul></html>";

	private static final String DESCRIPTION_NORMALIZATION_FACTOR = "<html>" +
		"The normalization factor to use. You can shoose one of the following: "
		+ "<i>Sum</i>, to divide each value by the sum of all values at the "
		+ "specified normalization level; or <i>Median</i>, to divide each "
		+ "value by the median of all values at the specified normalization "
		+ "level."
		+ "</html>";

	private static final String DESCRIPTION_CONDITION_COMPARISON = "<html>" +
		"The protein value to use to perform the statistical tests between "
		+ "conditions. You can choose one of the following: <i>Normalized "
		+ "quantification</i>, to perform the statistical tests using the "
		+ "normalized quantification values; or <i>Protein mass</i>, to "
		+ "perform the statistical tests using the protein mass value."
		+ "</html>";

	private File directory;
	private MascotQuantificationMethod quantificationMethod = EMPAI;
	private NormalizationStrategy normalizationStrategy;
	private NormalizationFactor normalizationFactor;
	private ComparisonMode comparisonMode;

	@Port(
		direction = Direction.INPUT, 
		name = "Quantifications CSV directory",
		description = DESCRIPTION_DIRECTORY,
		order = 1,
		extras="selectionMode=directories"
	)
	public void setDirectory(File directory) {
		this.directory = directory;
	}

	@Port(
		direction = Direction.INPUT, 
		name = "Normalization level", 
		description = DESCRIPTION_NORMALIZATION_LEVEL,
		order = 2,
		defaultValue = Normalization.DEFAULT_NORMALIZATION,
		extras = "mode=radiobuttons, numrows=2, numcolumns=2"
	)
	public void setNormalizationStrategy(Normalization normalization) {
		this.normalizationStrategy = normalization.getStrategy();
	}	

	@Port(
		direction = Direction.INPUT, 
		name = "Normalization factor", 
		description = DESCRIPTION_NORMALIZATION_FACTOR,
		order = 3,
		defaultValue = NormalizationFactorEnum.DEFAULT_FACTOR,
		extras = "mode=radiobuttons, numrows=1, numcolumns=2"
	)
	public void setNormalizationFactor(NormalizationFactorEnum normalizationFactor) {
		this.normalizationFactor = normalizationFactor.getNormalizationFactor();
	}

	@Port(
		direction = Direction.INPUT, 
		name = "Condition comparison", 
		description = DESCRIPTION_CONDITION_COMPARISON,
		order = 4,
		defaultValue = ComparisonMode.DEFAULT_COMPARISON,
		extras = "mode=radiobuttons, numrows=1, numcolumns=2"
	)
	public void setConditionComparisonMode(ComparisonMode comparisonMode) {
		this.comparisonMode = comparisonMode;
	}

	@Port(
		direction = Direction.OUTPUT, 
		order = 5
	)
	public QuantificationDatasetDatatype loadData() throws IOException {
		return new QuantificationDatasetDatatype(load(directory,
			quantificationMethod, normalizationStrategy, normalizationFactor),
			comparisonMode, directory);
	}
}
